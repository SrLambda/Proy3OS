import collections

class Simulador:
    def __init__(self, num_nucleos=2): # al menos dos núcleos 
        self.reloj_global = 0
        self.cpu = CPU(num_nucleos)
        self.memoria = Memoria()
        self.cola_nuevos = collections.deque() # Procesos que acaban de llegar
        self.cola_listos = collections.deque() # Procesos listos para ejecutar 
        self.procesos_ejecutando = [] # Procesos actualmente en la CPU 
        self.procesos_esperando = [] # Procesos que esperan por E/S (opcional, si se implementa) 
        self.procesos_terminados = [] # Procesos que han finalizado 
        self.todos_los_procesos = {} # Diccionario para acceso rápido por PID

        self.algoritmo_planificacion = "SJF" # Por defecto 
        self.quantum = 2 # Quantum para Round Robin 

        self.simulacion_activa = False

    def agregar_proceso(self, proceso):
	pass
        
    def set_algoritmo_planificacion(self, algoritmo):
	pass
        
    def set_quantum(self, quantum):
        self.quantum = quantum

    def iniciar_simulacion(self):
        self.simulacion_activa = True
        print("Iniciando simulación...")

    def detener_simulacion(self):
        self.simulacion_activa = False
        print("Simulación detenida.")

    def paso_simulacion(self):
	pass
       
       
    def planificar_cpu(self):
	pass


    def calcular_estadisticas(self):
	pass


        