"""
CASOS DE PRUEBA PARA EL SIMULADOR DE SO
========================================

Este script proporciona casos de prueba espec√≠ficos para validar
todas las funcionalidades de la interfaz gr√°fica avanzada.
"""

import sys
import os
import tkinter as tk
from tkinter import messagebox
import time

# Configurar path
sys.path.append('.')

def mostrar_instrucciones():
    """Muestra las instrucciones de prueba"""
    print("üß™ CASOS DE PRUEBA PARA EL SIMULADOR DE SO")
    print("=" * 60)
    print("üìã CHECKLIST DE FUNCIONALIDADES A PROBAR:")
    print()
    
    print("üéØ 1. FUNCIONALIDADES B√ÅSICAS:")
    print("   ‚úÖ Interfaz se abre correctamente")
    print("   ‚úÖ Paneles se muestran sin errores")
    print("   ‚úÖ Botones responden al click")
    print("   ‚úÖ Play/Pause/Reset funcionan")
    print()
    
    print("üß† 2. GESTI√ìN DE PROCESOS:")
    print("   ‚úÖ Agregar proceso manual")
    print("   ‚úÖ Agregar programas predefinidos")
    print("   ‚úÖ Divisi√≥n autom√°tica en procesos hijos")
    print("   ‚úÖ Terminaci√≥n de procesos")
    print("   ‚úÖ Visualizaci√≥n en tiempo real")
    print()
    
    print("üíæ 3. ALGORITMOS DE MEMORIA:")
    print("   ‚úÖ Cambio de algoritmo FIFO")
    print("   ‚úÖ Cambio de algoritmo LRU")
    print("   ‚úÖ Cambio de algoritmo LFU")
    print("   ‚úÖ Aplicar configuraci√≥n")
    print()
    
    print("üìä 4. M√âTRICAS AVANZADAS:")
    print("   ‚úÖ Page faults actualiz√°ndose")
    print("   ‚úÖ Hit ratio cambiando")
    print("   ‚úÖ Uso de RAM/SWAP en tiempo real")
    print("   ‚úÖ Fragmentaci√≥n detect√°ndose")
    print()
    
    print("üéØ 5. DEMOSTRACIONES:")
    print("   ‚úÖ Demo de algoritmos ejecut√°ndose")
    print("   ‚úÖ Comparaci√≥n de rendimiento")
    print("   ‚úÖ Gr√°ficos actualiz√°ndose")
    print()
    
    print("‚öôÔ∏è 6. CONFIGURACI√ìN AVANZADA:")
    print("   ‚úÖ Cambio de umbrales SWAP")
    print("   ‚úÖ Configuraci√≥n aplic√°ndose")
    print("   ‚úÖ Efectos visibles en m√©tricas")
    print()

def casos_de_prueba_especificos():
    """Lista casos de prueba espec√≠ficos paso a paso"""
    print("\nüî¨ CASOS DE PRUEBA ESPEC√çFICOS:")
    print("=" * 60)
    
    casos = [
        {
            "nombre": "Caso 1: Prueba de Carga B√°sica",
            "pasos": [
                "1. Ejecutar: python main.py",
                "2. Verificar que aparecen todos los paneles",
                "3. Click en 'A√±adir Proceso'",
                "4. Crear proceso: PID=1, Tama√±o=100MB, Duraci√≥n=5s",
                "5. Click 'Agregar' y verificar que aparece en la lista",
                "6. Click 'Play' y observar ejecuci√≥n",
                "7. Verificar m√©tricas actualiz√°ndose"
            ],
            "resultado_esperado": "Proceso se ejecuta, m√©tricas se actualizan, memoria se asigna correctamente"
        },
        {
            "nombre": "Caso 2: Programas Predefinidos",
            "pasos": [
                "1. Click 'A√±adir Proceso' ‚Üí 'Programas Predefinidos'",
                "2. Seleccionar 'Navegador Web'",
                "3. Click 'Lanzar Programa'",
                "4. Observar que se crean m√∫ltiples procesos hijos",
                "5. Verificar diferentes tama√±os de memoria",
                "6. Ejecutar simulaci√≥n"
            ],
            "resultado_esperado": "Se crean 3-4 procesos hijos autom√°ticamente con diferentes caracter√≠sticas"
        },
        {
            "nombre": "Caso 3: Cambio de Algoritmos",
            "pasos": [
                "1. Agregar 3-4 procesos de diferentes tama√±os",
                "2. En 'Configuraci√≥n Avanzada' seleccionar FIFO",
                "3. Click 'Aplicar Configuraci√≥n'",
                "4. Ejecutar simulaci√≥n y observar m√©tricas",
                "5. Pausar, cambiar a LRU, aplicar",
                "6. Continuar y comparar m√©tricas",
                "7. Repetir con LFU"
            ],
            "resultado_esperado": "Diferentes algoritmos muestran diferentes ratios de page faults y hit ratio"
        },
        {
            "nombre": "Caso 4: Saturaci√≥n de Memoria",
            "pasos": [
                "1. Agregar muchos procesos grandes (500MB+ cada uno)",
                "2. Ejecutar hasta llenar RAM",
                "3. Observar uso de SWAP increment√°ndose",
                "4. Verificar page faults aumentando",
                "5. Observar procesos movi√©ndose a SWAP"
            ],
            "resultado_esperado": "SWAP se activa, page faults aumentan, rendimiento se degrada visiblemente"
        },
        {
            "nombre": "Caso 5: Demo de Algoritmos",
            "pasos": [
                "1. Click 'Demo Algoritmos'",
                "2. Observar ventana de demostraci√≥n",
                "3. Ver comparaci√≥n autom√°tica de algoritmos",
                "4. Analizar gr√°ficos y estad√≠sticas",
                "5. Verificar diferencias de rendimiento"
            ],
            "resultado_esperado": "Se muestra comparaci√≥n clara entre FIFO, LRU y LFU con estad√≠sticas"
        },
        {
            "nombre": "Caso 6: Configuraci√≥n de SWAP",
            "pasos": [
                "1. Cambiar 'Umbral SWAP' a 60%",
                "2. Click 'Aplicar Configuraci√≥n'",
                "3. Agregar procesos hasta 60% de RAM",
                "4. Verificar que SWAP se activa antes",
                "5. Cambiar umbral a 90% y repetir"
            ],
            "resultado_esperado": "SWAP se activa en diferentes momentos seg√∫n el umbral configurado"
        },
        {
            "nombre": "Caso 7: Estr√©s de la Interfaz",
            "pasos": [
                "1. Agregar 10+ procesos simult√°neamente",
                "2. Cambiar algoritmos repetidamente",
                "3. Play/Pause/Reset varias veces",
                "4. Verificar que la interfaz no se cuelga",
                "5. Verificar m√©tricas consistentes"
            ],
            "resultado_esperado": "Interfaz mantiene responsividad, datos consistentes, sin errores"
        }
    ]
    
    for i, caso in enumerate(casos, 1):
        print(f"\nüìã {caso['nombre']}")
        print("-" * 40)
        for paso in caso['pasos']:
            print(f"   {paso}")
        print(f"üéØ Resultado esperado: {caso['resultado_esperado']}")
        print()

def ejecutar_con_datos_test():
    """Ejecuta el simulador con datos de prueba preconfigurados"""
    print("\nüöÄ EJECUTANDO SIMULADOR CON DATOS DE PRUEBA...")
    
    try:
        from Interfaz.interfaz import SimuladorUI
        
        root = tk.Tk()
        app = SimuladorUI(root)
        
        # Mensaje de bienvenida para testing
        messagebox.showinfo(
            "üß™ MODO DE PRUEBAS",
            "SIMULADOR EN MODO DE PRUEBAS\n\n"
            "‚úÖ Todas las funcionalidades est√°n activas\n"
            "üìä M√©tricas en tiempo real habilitadas\n"
            "üß† Algoritmos FIFO, LRU, LFU listos\n"
            "üéØ Demos y programas predefinidos disponibles\n\n"
            "¬°Comienza a probar las funcionalidades!"
        )
        
        root.mainloop()
        
    except Exception as e:
        print(f"‚ùå Error ejecutando simulador: {e}")
        return False
    
    return True

def main():
    """Funci√≥n principal del script de pruebas"""
    mostrar_instrucciones()
    casos_de_prueba_especificos()
    
    print("üîß HERRAMIENTAS DE TESTING:")
    print("=" * 40)
    print("1. python casos_prueba.py        - Ver esta gu√≠a")
    print("2. python main.py               - Ejecutar simulador normal")
    print("3. python ejecutar_simulador.py - Ejecutar versi√≥n simple")
    print()
    
    respuesta = input("¬øDeseas ejecutar el simulador para testing? (s/n): ").lower()
    if respuesta in ['s', 'si', 's√≠', 'y', 'yes']:
        ejecutar_con_datos_test()

if __name__ == "__main__":
    main()
